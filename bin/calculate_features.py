#!/usr/bin/env python

import argparse
from vscreenml_v2 import rdkit_wrapper
from vscreenml_v2 import binana_wrapper
from vscreenml_v2 import pyrosetta_wrapper
from vscreenml_v2 import rfscore_wrapper

from vscreenml_v2 import rdkit_calculators
from vscreenml_v2 import pyrosetta_calculators
from oddt.toolkits.extras.rdkit import MolToPDBQTBlock

def args():
    parser = argparse.ArgumentParser()
    parser.add_argument("-complex", type=str, required=True,
                        help="PDB file of protein/ligand complex minimized in Rosetta/PyRosetta")
    parser.add_argument("-params", type=str, required=True,
                        help="Params file of ligand generated by generic_potential/mol2genparams.py")
    parser.add_argument("-output", type=str, required=True,
                        help="File name for features in csv format")
    parser.add_argument("-packstat_oversample", type=int, default=100,
                        help="Number of rounds of packstat calculation")


    args = parser.parse_args()

    return args

def prepare_csv_text(features):

    header = ",".join(list(features.keys())) 
    values = ",".join(list(map(str, features.values())))

    return header + "\n" + values

if __name__ == '__main__':

    args = args()

    features = {"name": args.complex} 

    bound_pdb = args.complex
    params = args.params

    pyrosetta_wrapper.InitPyRosetta(f"-beta -extra_res_fa {params}")

    bound_pose = pyrosetta_wrapper.LoadPDBFile(bound_pdb)
    bound_pose = pyrosetta_wrapper.RenumberResiduesInPose(bound_pose)

    ligand_idx = pyrosetta_wrapper.GetResidueIndex(bound_pose, name="LG1")

    unbound_pose = pyrosetta_wrapper.MoveLigandFromActiveSite(bound_pose, residue_id=ligand_idx)
    ligand_pose = pyrosetta_wrapper.ExtractResidueFromPose(bound_pose, residue_id=ligand_idx)
    protein_pose = pyrosetta_wrapper.DeleteResidueFromPose(bound_pose, residue_id=ligand_idx)

    sasa_calculator = pyrosetta_calculators.SasaCalculator()
    features["TotalExposedSasa"] = sasa_calculator.GetTotalExposedSasa(bound_pose, unbound_pose, ligand_pose)
    features["TotalBSA"] = sasa_calculator.GetTotalBSA(bound_pose, unbound_pose)
    features["InterfaceHydrophobicSasa"], features["InterfacePolarSasa"] = sasa_calculator.GetInterfaceSasa(bound_pose, unbound_pose, ligand_idx)

    energy_calculator = pyrosetta_calculators.EnergyCalculator()
    energy_calculator.CalcEnergies(bound_pose, unbound_pose)

    features["InteractionScore"] = energy_calculator.GetInteractionScore()
    features["FaAtrInteraction"] = energy_calculator.GetFaAtrInteraction()
    features["FaRepInteraction"] = energy_calculator.GetFaRepInteraction()
    features["FaSolInteraction"] = energy_calculator.GetFaSolInteraction()
    features["FaElecInteraction"] = energy_calculator.GetFaElecInteraction()
    features["HBondBbScInteraction"] = energy_calculator.GetHBondBbScInteraction()
    features["HBondScInteraction"] = energy_calculator.GetHBondScInteraction()
    features["GenBonded"] = energy_calculator.GetGenBonded()
    
    posemetric_calculator = pyrosetta_calculators.PoseMetricCalculator(packstat_oversample=args.packstat_oversample)
    features["HBInterface"] = posemetric_calculator.GetHBInterface(bound_pose, unbound_pose)

    if args.packstat_oversample != 0:
        features["TotalPackStat"] = posemetric_calculator.GetTotalPackStat(bound_pose, unbound_pose)
    
    features["InterfaceUnsat"] = posemetric_calculator.GetInterfaceUnsat(bound_pose, unbound_pose)

    ligand_pdb_string = pyrosetta_wrapper.GetPDBStringFromPose(ligand_pose)
    protein_pdb_string = pyrosetta_wrapper.GetPDBStringFromPose(protein_pose)

    params_string = open(params, "r").read()
    ligand_mol = rdkit_wrapper.ReadPDBParamsFile(ligand_pdb_string, params=params_string)
    protein_mol = rdkit_wrapper.ReadPDBFile(protein_pdb_string)    

    ligand_pdbqt = MolToPDBQTBlock(ligand_mol, flexible=True, addHs=False, computeCharges=True)
    protein_pdbqt = MolToPDBQTBlock(protein_mol, flexible=False, addHs=False, computeCharges=True)

    binana_calculator = binana_wrapper.BinanaCalculator()
    binana_calculator.CalcInteractions(ligand_pdbqt, protein_pdbqt)

    features["SideFlexAlpha"] = binana_calculator.GetSideFlexAlpha()
    features["SideFlexBeta"] = binana_calculator.GetSideFlexBeta()
    features["SideFlexOther"] = binana_calculator.GetSideFlexOther()
    features["BackFlexAlpha"] = binana_calculator.GetBackFlexAlpha()
    features["BackFlexBeta"] = binana_calculator.GetBackFlexBeta()
    features["BackFlexOther"] = binana_calculator.GetBackFlexOther()
    features["PiPi"] = binana_calculator.GetPiPi()
    features["TStacking"] = binana_calculator.GetTStacking()
    features["CationPi"] = binana_calculator.GetCationPi()
    features["SaltBridge"] = binana_calculator.GetSaltBridge()
    features["TotalElec"] = binana_calculator.GetTotalElec()
    features["TotalHBond"] = binana_calculator.GetTotalHBond()
    features["TotalHphobics"] = binana_calculator.GetTotalHphobics()

    rfscore_calculator = rfscore_wrapper.RFScoreCalculator()
    features.update(rfscore_calculator.GetScore(ligand_mol, protein_mol))

    rdkit_calculator = rdkit_calculators.RDKitCalculator()
    features["FCsp3"] = rdkit_calculator.CalcFCsp3(ligand_mol)
    features["NumHAcceptors"] = rdkit_calculator.CalcNumHAcceptors(ligand_mol)
    features["NumHDonors"] = rdkit_calculator.CalcNumHDonors(ligand_mol)
    features["MolLogP"] = rdkit_calculator.CalcMolLogP(ligand_mol)
    features["TPSA"] = rdkit_calculator.CalcTPSA(ligand_mol)
    features["VdwSA"] = rdkit_calculator.CalcVdwSA(ligand_mol)

    with open(args.output, "w") as fwr:
        fwr.write(prepare_csv_text(features))
        fwr.close()